# TIL: CI/CD 기본 개념 정리

## 1. CI/CD란?

- **CI (Continuous Integration, 지속적 통합)**  
  개발자들이 각자 작업한 코드를 자주(보통 하루에도 여러 번) 중앙 저장소에 병합하는 개발 방법론  
  - 자동 빌드 및 테스트 수행  
  - 코드 충돌 조기 발견 및 해결  
  - 품질 유지 및 개발 속도 향상

- **CD (Continuous Delivery / Continuous Deployment, 지속적 배포/배포 자동화)**  
  CI 이후의 단계로, 빌드된 코드를 자동으로 스테이징 또는 프로덕션 환경에 배포하는 과정  
  - **Continuous Delivery**: 수동 승인 후 배포 가능 상태 유지  
  - **Continuous Deployment**: 승인 없이 자동으로 프로덕션에 배포

---

## 2. CI/CD 파이프라인 주요 단계

1. **코드 커밋**  
   개발자가 변경 사항을 버전 관리 시스템(Git 등)에 푸시

2. **빌드(Build)**  
   소스 코드를 컴파일/패키징하여 실행 가능한 산출물 생성

3. **테스트(Test)**  
   단위 테스트(Unit Test), 통합 테스트(Integration Test) 등 자동화된 테스트 실행

4. **배포(Deploy)**  
   테스트를 통과한 빌드 산출물을 스테이징/프로덕션 환경에 배포

5. **모니터링(Monitoring)**  
   배포 후 시스템 상태와 성능을 감시하여 문제 발생 시 알림

---

## 3. CI/CD 도구 예시

| 도구명       | 설명                                |
|-------------|-----------------------------------|
| Jenkins     | 오픈소스 자동화 서버, 다양한 플러그인 지원 |
| GitHub Actions | GitHub 내장 CI/CD 서비스             |
| GitLab CI   | GitLab 통합 CI/CD 기능               |
| CircleCI    | 클라우드 기반 CI/CD 플랫폼            |
| Travis CI   | 오픈소스 프로젝트에 인기 있는 CI 서비스 |

---

## 4. CI/CD의 장점

- 빠른 피드백과 오류 조기 발견  
- 배포 자동화로 인한 인적 오류 감소  
- 일관된 빌드 및 배포 환경 유지  
- 개발과 운영 간 협업 강화 (DevOps 문화 촉진)

---

## 5. 추가 용어

- **빌드 자동화(Build Automation)**: 빌드 과정을 자동화하는 것  
- **테스트 자동화(Test Automation)**: 수동 테스트 대신 자동화된 테스트 수행  
- **롤백(Rollback)**: 문제가 발생한 배포를 이전 안정 버전으로 되돌리는 작업  
- **블루-그린 배포(Blue-Green Deployment)**: 두 개의 동일한 환경을 운영하며 무중단 배포를 가능하게 하는 방식
